{"message":"the trait bound `DateTime<Local>: Type<MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/encode.rs","byte_start":450,"byte_end":1517,"line_start":20,"line_end":47,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        impl<'q> crate::encode::Encode<'q, crate::any::Any> for $ty","highlight_start":9,"highlight_end":68},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ty: crate::any::AnyEncode<'q>,","highlight_start":1,"highlight_end":44},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn encode_by_ref(","highlight_start":1,"highlight_end":30},{"text":"                &self,","highlight_start":1,"highlight_end":23},{"text":"                buf: &mut crate::any::AnyArgumentBuffer<'q>,","highlight_start":1,"highlight_end":61},{"text":"            ) -> crate::encode::IsNull {","highlight_start":1,"highlight_end":41},{"text":"                match &mut buf.0 {","highlight_start":1,"highlight_end":35},{"text":"                    #[cfg(feature = \"postgres\")]","highlight_start":1,"highlight_end":49},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::Postgres(args, _) => {","highlight_start":1,"highlight_end":89},{"text":"                        args.add(self)","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"mysql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::MySql(args, _) => args.add(self),","highlight_start":1,"highlight_end":100},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"mssql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::Mssql(args, _) => args.add(self),","highlight_start":1,"highlight_end":100},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"sqlite\")]","highlight_start":1,"highlight_end":47},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::Sqlite(args) => args.add(self),","highlight_start":1,"highlight_end":98},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // unused","highlight_start":1,"highlight_end":26},{"text":"                crate::encode::IsNull::No","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"the trait `Type<MySql>` is not implemented for `DateTime<Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/types.rs","byte_start":4283,"byte_end":4341,"line_start":159,"line_end":159,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_any_encode!(chrono::DateTime<chrono::offset::Local>);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_any_encode!","def_site_span":{"file_name":"/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/encode.rs","byte_start":393,"byte_end":1526,"line_start":18,"line_end":49,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_any_encode {","highlight_start":1,"highlight_end":31},{"text":"    ($ty:ty) => {","highlight_start":1,"highlight_end":18},{"text":"        impl<'q> crate::encode::Encode<'q, crate::any::Any> for $ty","highlight_start":1,"highlight_end":68},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ty: crate::any::AnyEncode<'q>,","highlight_start":1,"highlight_end":44},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn encode_by_ref(","highlight_start":1,"highlight_end":30},{"text":"                &self,","highlight_start":1,"highlight_end":23},{"text":"                buf: &mut crate::any::AnyArgumentBuffer<'q>,","highlight_start":1,"highlight_end":61},{"text":"            ) -> crate::encode::IsNull {","highlight_start":1,"highlight_end":41},{"text":"                match &mut buf.0 {","highlight_start":1,"highlight_end":35},{"text":"                    #[cfg(feature = \"postgres\")]","highlight_start":1,"highlight_end":49},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::Postgres(args, _) => {","highlight_start":1,"highlight_end":89},{"text":"                        args.add(self)","highlight_start":1,"highlight_end":39},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"mysql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::MySql(args, _) => args.add(self),","highlight_start":1,"highlight_end":100},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"mssql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::Mssql(args, _) => args.add(self),","highlight_start":1,"highlight_end":100},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"sqlite\")]","highlight_start":1,"highlight_end":47},{"text":"                    crate::any::arguments::AnyArgumentBufferKind::Sqlite(args) => args.add(self),","highlight_start":1,"highlight_end":98},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                // unused","highlight_start":1,"highlight_end":26},{"text":"                crate::encode::IsNull::No","highlight_start":1,"highlight_end":42},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following implementations were found:\n  <DateTime<Local> as Type<any::database::Any>>\n  <DateTime<Utc> as Type<MySql>>\n  <DateTime<Utc> as Type<any::database::Any>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see issue #48214","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `DateTime<Local>: Type<MySql>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/encode.rs:20:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<'q> crate::encode::Encode<'q, crate::any::Any> for $ty\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            $ty: crate::any::AnyEncode<'q>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Type<MySql>` is not implemented for `DateTime<Local>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/types.rs:159:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mimpl_any_encode!(chrono::DateTime<chrono::offset::Local>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DateTime<Local> as Type<any::database::Any>>\u001b[0m\n\u001b[0m              <DateTime<Utc> as Type<MySql>>\u001b[0m\n\u001b[0m              <DateTime<Utc> as Type<any::database::Any>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: see issue #48214\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"the trait bound `DateTime<Local>: Type<MySql>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/decode.rs","byte_start":450,"byte_end":1755,"line_start":20,"line_end":49,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        impl<'r> crate::decode::Decode<'r, crate::any::Any> for $ty","highlight_start":9,"highlight_end":68},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ty: crate::any::AnyDecode<'r>,","highlight_start":1,"highlight_end":44},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn decode(","highlight_start":1,"highlight_end":23},{"text":"                value: crate::any::AnyValueRef<'r>,","highlight_start":1,"highlight_end":52},{"text":"            ) -> Result<Self, crate::error::BoxDynError> {","highlight_start":1,"highlight_end":59},{"text":"                match value.kind {","highlight_start":1,"highlight_end":35},{"text":"                    #[cfg(feature = \"mysql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::value::AnyValueRefKind::MySql(value) => {","highlight_start":1,"highlight_end":74},{"text":"                        <$ty as crate::decode::Decode<'r, crate::mysql::MySql>>::decode(value)","highlight_start":1,"highlight_end":95},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"sqlite\")]","highlight_start":1,"highlight_end":47},{"text":"                    crate::any::value::AnyValueRefKind::Sqlite(value) => {","highlight_start":1,"highlight_end":75},{"text":"                        <$ty as crate::decode::Decode<'r, crate::sqlite::Sqlite>>::decode(value)","highlight_start":1,"highlight_end":97},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"mssql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::value::AnyValueRefKind::Mssql(value) => {","highlight_start":1,"highlight_end":74},{"text":"                        <$ty as crate::decode::Decode<'r, crate::mssql::Mssql>>::decode(value)","highlight_start":1,"highlight_end":95},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"postgres\")]","highlight_start":1,"highlight_end":49},{"text":"                    crate::any::value::AnyValueRefKind::Postgres(value) => {","highlight_start":1,"highlight_end":77},{"text":"                        <$ty as crate::decode::Decode<'r, crate::postgres::Postgres>>::decode(value)","highlight_start":1,"highlight_end":101},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"the trait `Type<MySql>` is not implemented for `DateTime<Local>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/types.rs","byte_start":5205,"byte_end":5263,"line_start":191,"line_end":191,"column_start":1,"column_end":59,"is_primary":false,"text":[{"text":"impl_any_decode!(chrono::DateTime<chrono::offset::Local>);","highlight_start":1,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"impl_any_decode!","def_site_span":{"file_name":"/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/decode.rs","byte_start":393,"byte_end":1764,"line_start":18,"line_end":51,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! impl_any_decode {","highlight_start":1,"highlight_end":31},{"text":"    ($ty:ty) => {","highlight_start":1,"highlight_end":18},{"text":"        impl<'r> crate::decode::Decode<'r, crate::any::Any> for $ty","highlight_start":1,"highlight_end":68},{"text":"        where","highlight_start":1,"highlight_end":14},{"text":"            $ty: crate::any::AnyDecode<'r>,","highlight_start":1,"highlight_end":44},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            fn decode(","highlight_start":1,"highlight_end":23},{"text":"                value: crate::any::AnyValueRef<'r>,","highlight_start":1,"highlight_end":52},{"text":"            ) -> Result<Self, crate::error::BoxDynError> {","highlight_start":1,"highlight_end":59},{"text":"                match value.kind {","highlight_start":1,"highlight_end":35},{"text":"                    #[cfg(feature = \"mysql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::value::AnyValueRefKind::MySql(value) => {","highlight_start":1,"highlight_end":74},{"text":"                        <$ty as crate::decode::Decode<'r, crate::mysql::MySql>>::decode(value)","highlight_start":1,"highlight_end":95},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"sqlite\")]","highlight_start":1,"highlight_end":47},{"text":"                    crate::any::value::AnyValueRefKind::Sqlite(value) => {","highlight_start":1,"highlight_end":75},{"text":"                        <$ty as crate::decode::Decode<'r, crate::sqlite::Sqlite>>::decode(value)","highlight_start":1,"highlight_end":97},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"mssql\")]","highlight_start":1,"highlight_end":46},{"text":"                    crate::any::value::AnyValueRefKind::Mssql(value) => {","highlight_start":1,"highlight_end":74},{"text":"                        <$ty as crate::decode::Decode<'r, crate::mssql::Mssql>>::decode(value)","highlight_start":1,"highlight_end":95},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"","highlight_start":1,"highlight_end":1},{"text":"                    #[cfg(feature = \"postgres\")]","highlight_start":1,"highlight_end":49},{"text":"                    crate::any::value::AnyValueRefKind::Postgres(value) => {","highlight_start":1,"highlight_end":77},{"text":"                        <$ty as crate::decode::Decode<'r, crate::postgres::Postgres>>::decode(value)","highlight_start":1,"highlight_end":101},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following implementations were found:\n  <DateTime<Local> as Type<any::database::Any>>\n  <DateTime<Utc> as Type<MySql>>\n  <DateTime<Utc> as Type<any::database::Any>>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"see issue #48214","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `DateTime<Local>: Type<MySql>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/decode.rs:20:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        impl<'r> crate::decode::Decode<'r, crate::any::Any> for $ty\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            $ty: crate::any::AnyDecode<'r>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Type<MySql>` is not implemented for `DateTime<Local>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/rena/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-core-0.5.5/src/any/types.rs:191:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0mimpl_any_decode!(chrono::DateTime<chrono::offset::Local>);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12min this macro invocation\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following implementations were found:\u001b[0m\n\u001b[0m              <DateTime<Local> as Type<any::database::Any>>\u001b[0m\n\u001b[0m              <DateTime<Utc> as Type<MySql>>\u001b[0m\n\u001b[0m              <DateTime<Utc> as Type<any::database::Any>>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: see issue #48214\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
